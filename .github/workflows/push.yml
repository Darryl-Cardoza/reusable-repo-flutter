name: "Flutter CI Reusable Workflow"

on:
  workflow_call:
    inputs:
      build_ios:
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        required: false
      CODACY_PROJECT_TOKEN:
        required: false

env:
  FLUTTER_VERSION: ${{ vars.FLUTTER_VERSION }}
  FLUTTER_CHANNEL: ${{ vars.FLUTTER_CHANNEL }}
  COVERAGE_THRESHOLD: ${{ vars.COVERAGE_THRESHOLD }}

jobs:
  test_and_coverage:
    name: Run Tests & Generate Coverage
    runs-on: ubuntu-latest
    outputs:
      test-report-path: test-results/test-report.html

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: source .github/env.sh

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Run Flutter Tests (Machine & Coverage Output)
        run: |
          mkdir -p test-results
          flutter test --coverage --machine > test-results/results.json || true
          cat test-results/results.json

      - name: Convert Test Output to JUnit XML
        run: |
          dart run .github/tool/json_to_junit.dart < test-results/results.json > test-results/test-report.xml || true

      - name: Generate HTML Test Report
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: 'no-frames'
          input: 'test-results/test-report.xml'
          output: 'test-results/test-report.html'

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Test-Report
          path: test-results/test-report.html

  coverage_validation:
    name: Validate Code Coverage
    runs-on: ubuntu-latest
    needs: test_and_coverage

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Generate HTML Coverage Report
        run: |
          mkdir -p coverage_report
          genhtml coverage/lcov.info \
            --output-directory coverage_report \
            --title "Flutter Test Coverage" \
            --show-details \
            --highlight \
            --legend

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Coverage-Report
          path: coverage_report/

      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          result=$(echo "$total_coverage < $COVERAGE_THRESHOLD" | bc -l)
          if [ "$result" -eq 1 ]; then
            echo "Code coverage ($total_coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

  upload_reports:
    name: Upload Reports to Codacy
    runs-on: ubuntu-latest
    needs: coverage_validation
    env:
      CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN || 'none' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Conditionally Upload Coverage to Codacy
        run: |
          if [ "$CODACY_PROJECT_TOKEN" != "none" ]; then
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
              --language Dart \
              --coverage-reports coverage/lcov.info \
              --commit-uuid ${{ github.sha }} \
              --project-token "$CODACY_PROJECT_TOKEN"
          else
            echo "CODACY_PROJECT_TOKEN not provided, skipping Codacy upload."
          fi

  build:
    name: Build Flutter App
    runs-on: ubuntu-latest
    needs: test_and_coverage

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: source .github/env.sh

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Build Android APK
        run: flutter build apk --split-per-abi

      - name: Conditionally Build iOS App
        if: ${{ inputs.build_ios }}
        run: flutter build ios --no-codesign

  analyze_codacy:
    name: Static Analysis - Codacy & Dart Analyzer
    runs-on: ubuntu-latest
    needs: test_and_coverage
    env:
      CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN || 'none' }}

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Run Dart Analyzer
        run: dart analyze > analyzer-report.txt || true

      - name: Upload Dart Analyzer Report
        uses: actions/upload-artifact@v4
        with:
          name: Dart-Analyzer-Report
          path: analyzer-report.txt

      - name: Run Static Code Analysis with Codacy
        run: |
          if [ "$CODACY_PROJECT_TOKEN" != "none" ]; then
            curl -Ls https://raw.githubusercontent.com/codacy/codacy-cli-v2/main/codacy-cli.sh \
              -o /tmp/codacy-cli-v2 && chmod +x /tmp/codacy-cli-v2

            /tmp/codacy-cli-v2 analyze \
              --tool dartanalyzer \
              --format sarif \
              --output ./results.sarif

            if [ -f ./results.sarif ]; then
              /tmp/codacy-cli-v2 upload \
                --sarif-path ./results.sarif \
                --commit-uuid ${{ github.sha }} \
                --project-token "$CODACY_PROJECT_TOKEN"
            else
              echo "No SARIF file found, skipping Codacy upload."
            fi
          else
            echo "CODACY_PROJECT_TOKEN not provided, skipping Codacy analysis."
          fi

  analyze_sonar:
    name: Static Analysis - SonarQube
    runs-on: ubuntu-latest
    needs: test_and_coverage
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || 'none' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SonarQube Scan
        run: |
          if [ "$SONAR_TOKEN" != "none" ]; then
            echo "Running SonarQube scan..."
            export SONAR_TOKEN="$SONAR_TOKEN"
            sonar-scanner \
              -Dsonar.projectBaseDir=. \
              -Dsonar.login=$SONAR_TOKEN
          else
            echo "SONAR_TOKEN not provided, skipping SonarQube scan."
          fi
