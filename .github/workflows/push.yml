name: "Flutter CI Reusable Workflow"

on:
  workflow_call:
    inputs:
      build_ios:
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        required: false
      CODACY_PROJECT_TOKEN:
        required: false

env:
  FLUTTER_VERSION: ${{ vars.FLUTTER_VERSION }}
  FLUTTER_CHANNEL: ${{ vars.FLUTTER_CHANNEL }}
  COVERAGE_THRESHOLD: ${{ vars.COVERAGE_THRESHOLD }}

jobs:
  build_flutter_project:
    name: Build Flutter Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Flutter Pub Get
        run: flutter pub get

  run_tests:
    name: Run Test Cases & Generate Report
    runs-on: ubuntu-latest
    needs: build_flutter_project
    outputs:
      test-report-path: test-results/test-report.html

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Fetch Dart Utility Scripts
        run: |
          mkdir -p .github/tool
          curl -sSL https://raw.githubusercontent.com/Rite-Technologies-23/reusable-repo-flutter/main/.github/tool/json_to_junit.dart -o .github/tool/json_to_junit.dart
          curl -sSL https://raw.githubusercontent.com/Rite-Technologies-23/reusable-repo-flutter/main/.github/tool/run_filtered_tests.dart -o .github/tool/run_filtered_tests.dart

      - name: Run Flutter Tests (Machine & Coverage Output)
        run: |
          mkdir -p test-results
          flutter test --coverage --machine > test-results/results.json || true
          cat test-results/results.json

      - name: Convert Test Output to JUnit XML
        run: |
          dart run .github/tool/json_to_junit.dart < test-results/results.json > test-results/test-report.xml || true

      - name: Generate HTML Test Report
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: 'no-frames'
          input: 'test-results/test-report.xml'
          output: 'test-results/test-report.html'

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Test-Report
          path: test-results/test-report.html

  test_coverage:
    name: Run Test Coverage & Generate Report
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Generate HTML Coverage Report
        run: |
          mkdir -p coverage_report
          genhtml coverage/lcov.info \
            --output-directory coverage_report \
            --title "Flutter Test Coverage" \
            --show-details \
            --highlight \
            --legend

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Coverage-Report
          path: coverage_report/

      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          result=$(echo "$total_coverage < $COVERAGE_THRESHOLD" | bc -l)
          if [ "$result" -eq 1 ]; then
            echo "Code coverage ($total_coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

  dart_analyzer:
    name: Run Dart Analyzer & Generate Report
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Run Dart Analyzer
        run: dart analyze > analyzer-report.txt || true

      - name: Fetch Dart Utility Scripts
        run: |
          mkdir -p .github/tool
          curl -sSL https://raw.githubusercontent.com/Rite-Technologies-23/reusable-repo-flutter/main/.github/tool/analyzer_to_html.dart -o .github/tool/analyzer_to_html.dart

      - name: Convert Analyzer Report to HTML
        run: dart .github/tool/analyzer_to_html.dart

      - name: Upload Dart Analyzer Reports
        uses: actions/upload-artifact@v4
        with:
          name: Dart-Analyzer-Reports
          path: |
            analyzer-report.txt
            analyzer-report.html

  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    needs: dart_analyzer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: source .github/env.sh

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter

      - name: Build Android APK
        run: flutter build apk --split-per-abi

      - name: Conditionally Build iOS App
        if: ${{ inputs.build_ios }}
        run: flutter build ios --no-codesign
